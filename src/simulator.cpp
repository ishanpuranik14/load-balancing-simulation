#include "Poisson.h"
#include "Generator.h"
#include <bits/stdc++.h>
using namespace std;

int reqIdGen = 0;

class Request
{
    int timestamp;
    int reqSize;
    int respSize; // bytes
    int pendingSize;
    int sentBy; // server number; -1 for dispatcher
    int reqId;  // autogenerated incrementing

public:
    Request(int timestamp, int reqSize, int sentBy)
    {
        reqId = reqIdGen++;
        this->timestamp = timestamp;
        this->reqSize = reqSize;
        respSize = rand() % 100;
        pendingSize = respSize;
        this->sentBy = sentBy;
    }

    int getReqId()
    {
        return reqId;
    }

    int getRespSize()
    {
        return respSize;
    }

    int getPendingSize()
    {
        return pendingSize;
    }

    void updatePendingSize(int bytesProcessed)
    {
        pendingSize = pendingSize - bytesProcessed;
    }
};

class Server
{
    long alpha, totalRespSize, totalReqs, totalRespBytesProcessed, totalReqsProcessed;
    int server_no;
    std::queue<Request> reqQueue, processedReqQueue;
    double avgRespSize;

public:
    Server(long alpha, int server_no)
    {
        // Initializations
        totalRespSize = 0;
        totalReqs = 0;
        totalRespBytesProcessed = 0;
        this->alpha = alpha;
        this->server_no = server_no;
        cout<< "\tServer #" << server_no << " | alpha : "<< alpha << endl;
    }

    queue<Request> getReqQueue()
    {
        return reqQueue;
    }

    queue<Request> getProcessedReqQueue()
    {
        return processedReqQueue;
    }

    int getAlpha()
    {
        return alpha;
    }

    void addRequest(Request request)
    {
        reqQueue.push(request);
        totalReqs++;
        totalRespSize += request.getRespSize();
        avgRespSize = totalRespSize / totalReqs;
    }

    long getPendingRequestCount(){
        return getReqQueue().size();
    }

    long getPendingRequestSize(){
        long numRequests = getPendingRequestCount();
        long pendingReqSize = 0;
        while(numRequests--){
            Request &cur = reqQueue.front();
            pendingReqSize += cur.getPendingSize();
            reqQueue.pop();
            reqQueue.push(cur);
        }
        return pendingReqSize;
    }

    long getTotalProcessedBytes(){
        return totalRespBytesProcessed;
    }

    long getNumProcessedRequests(){
        if(!reqQueue.empty()){
            Request &top = reqQueue.front();
            if(top.getPendingSize() != top.getRespSize()){
                return 1 + processedReqQueue.size();
            }
        }
        return processedReqQueue.size();
    }

    void processData(int timeUnits)
    {
        int maxBytes = timeUnits * alpha;
        cout << "\t\tServer #" << server_no << " will process " << maxBytes << " bytes in " << timeUnits << " time units" << endl;
        while (!reqQueue.empty() && maxBytes > 0)
        {
            Request &cur = reqQueue.front();
            int pendingSize = cur.getPendingSize();
            if (pendingSize > maxBytes)
            {
                cout << "\t\t\tServer #" << server_no << " processed " << maxBytes << " / " << cur.getRespSize() << " bytes of response for request #"<< cur.getReqId() << endl;
                // update
                cur.updatePendingSize(maxBytes);
                maxBytes -= maxBytes;
                totalRespBytesProcessed += maxBytes;
            }
            else
            {
                // update
                cur.updatePendingSize(pendingSize);
                cout << "\t\t\tServer #" << server_no << " processed " << (cur.getRespSize() - cur.getPendingSize()) << " / " << cur.getRespSize() << " bytes of response for request #"<< cur.getReqId() << endl;
                reqQueue.pop();
                processedReqQueue.push(cur);
                maxBytes -= pendingSize;
                totalRespBytesProcessed += pendingSize;
            }
        }
    }
};

int main(int argc, char **argv)
{
    // Initializations
    int maxSimulationTime = 5;
    int time = 0;
    int reqId = 0;
    int server_count = 5;
    int alpha = 50;
    Server *server[server_count];
    cout << "Simulation parameters: "<< endl << "Simulation time: " << maxSimulationTime << endl << "Number of servers: "<< server_count << endl;
    Poisson p = Poisson(1.0 / 2.0);
    for (int i = 0; i < server_count; i++)
    {
        server[i] = new Server(alpha, i);
    }
    // Iteration
    cout << endl << "----SIMULATION BEGINS----" << endl << endl;
    while (time < maxSimulationTime)
    {
        int nextTime = (int)p.generate();
        cout << "\tTime elapsed " << time << " time units" << endl;
        cout << "\tNext request arrives in " << nextTime << " time units" << endl;
        time += nextTime;
        cout << "\tCreating the current request" << endl;
        Request request = Request(time-nextTime, 1, -1);
        cout << "\tCurrent response size = " << request.getRespSize() << endl;
        int nextServer = rand() % server_count;
        cout << "\tMapping the request on to server #" << nextServer << endl;
        (*server[nextServer]).addRequest(request);
        // Process the requests on each server till the next request comes in
        for (int i = 0; i < server_count; i++)
        {
            // Take care to process no more than the max simulation time
            if(time <= maxSimulationTime){
                (*server[i]).processData(nextTime);
            } else{
                (*server[i]).processData(maxSimulationTime - time + nextTime);
            }
        }
        cout << endl;
    }
    cout << "----SIMULATION ENDS----" << endl << endl;
    // compute and print statistics
    cout << "----STATISTICS----" << endl << endl;
    cout << "Per server" << endl;
    long totalPendingRespSize = 0, totalPendingReqsCount = 0, totalBytesProcessed = 0, totalRequestsProcessed = 0;
    for (int i = 0; i < server_count; i++){
        // Get the data
        long pendingReqsCount = (*server[i]).getPendingRequestCount();
        long pendingReqsSize = (*server[i]).getPendingRequestSize();
        long bytesProcessed = (*server[i]).getTotalProcessedBytes();
        long numProcessedRequests = (*server[i]).getNumProcessedRequests();
        // Add to cumulative
        totalPendingReqsCount += pendingReqsCount;
        totalPendingRespSize += pendingReqsSize;
        totalBytesProcessed += bytesProcessed;
        totalRequestsProcessed += numProcessedRequests;
        // Print out
        cout << "\tServer #"<< i << endl;
        cout << "\t\t # of requests processed (even partial) : " << numProcessedRequests << endl;
        cout << "\t\t Size of processed responses : " << bytesProcessed << " bytes" << endl;
        cout << "\t\t # of pending requests : " << pendingReqsCount << endl;
        cout << "\t\t Size of pending responses : " << pendingReqsSize << " bytes" << endl;
    }
    cout << endl << "Cumulative" << endl;
    cout << "Total # of requests processed (even partial) : " << totalRequestsProcessed << endl;
    cout << "Total size of processed responses : " << totalBytesProcessed << " bytes" << endl;
    cout << "Total # of pending requests : " << totalPendingReqsCount << endl;
    cout << "Total pending response size : " << totalPendingRespSize << " bytes" << endl;

    return 0;
}
